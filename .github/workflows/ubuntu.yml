name: Test on Ubuntu

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:

  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: sudo apt -y install dpkg-dev cmake g++ gcc binutils libx11-dev libxft-dev libxext-dev libssl-dev gfortran libpcre3-dev xlibmesa-glu-dev libglew-dev libftgl-dev libmysqlclient-dev libfftw3-dev libcfitsio-dev graphviz-dev libavahi-compat-libdnssd-dev libldap2-dev libxml2-dev libkrb5-dev libgsl0-dev qtwebengine5-dev cmake-curses-gui libxpm4 libxerces-c-dev libxpm-dev libxmu-dev libfreetype6-dev qtbase5-dev qttools5-dev-tools libgtest-dev libeigen3-dev qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools

    - name: Install ROOT
      run: |
        wget https://root.cern/download/$ROOT_VERSION.tar.gz
        tar xf $ROOT_VERSION.tar.gz -C $HOME
      env:
        ROOT_VERSION: "root_v6.26.04.Linux-ubuntu22-x86_64-gcc11.2"

    - name: Install Geant4
      run: |
        wget https://github.com/hahnjo/geant4-actions-binaries/releases/download/$GEANT4_VERSION/$GEANT4_VERSION-binaries.tar.gz
        tar xf $GEANT4_VERSION-binaries.tar.gz -C $HOME
      env:
        GEANT4_VERSION: "geant4-v11.0.2"
    
    - name: Source
      run: |
        pwd
        ls -lahtr $HOME
        ls -lahtr $HOME/root
        ls -lahtr $HOME/root/bin
        source $HOME/root/bin/thisroot.sh
        source $HOME/Geant4/bin/geant4.sh

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Install
      run: cmake --install ${{github.workspace}}/build --prefix ${{github.workspace}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        #source ~/.local/root/bin/thisroot.sh
        #source ~/.local/Geant4/bin/geant4.sh
        #pwd
        #echo "Check path"
        #env | grep G4
        #ls -lahtr ~/.local
        #ls -lahtr ~/.local/Geant4
        #ls -lahtr ~/.local/Geant4/share
        #ls -lahtr ~/.local/Geant4/share/Geant4-11.0.2
        #ls -lahtr ~/.local/Geant4/share/Geant4-11.0.2/data
        #ls -lahtr ~/.local/Geant4/share/Geant4-11.0.2/data/G4ENSDFSTATE2.3
        #echo "env"
        #env
        #head -n 20  ~/.local/Geant4/share/Geant4-11.0.2/data/G4ENSDFSTATE2.3
        ctest -C ${{env.BUILD_TYPE}} --verbose
      
